;;;; This file is the first one to be compiled by the cross compiler.
;;;; When it is compiled, the global environment is empty.  In
;;;; particular, it has not macros in it.  The purpose of the code
;;;; this file is to create the first macro DEFMACRO.  But this must
;;;; be done "manually".  
;;;;
;;;; The version of DEFMACRO found here is not the final one.  It is
;;;; special in two different ways:
;;;;
;;;;  * First, it starts with (EVAL-WHEN (:COMPILE-TOPLEVEL) ...), so that
;;;;    the definition is only evaluated by the host.  The target
;;;;    environment is empty, so there would be quite a number of
;;;;    warnings about undefined functions and macros if we were to
;;;;    let the cross ocmpiler compile this definition.  The FASL file
;;;;    generated by the compilation of this file is useless. 
;;;;
;;;;  * Second, the expansion of the DEFMACRO form is also wrapped in 
;;;;    (EVAL-WHEN (:COMPILE-TOPLEVEL).  This means that when any
;;;;    subsequent file is compiled with the cross compiler and that
;;;;    file contains a DEFMACRO form, then the expansion will only be
;;;;    evaluated by the host.  In effect, such DEFMACRO forms will
;;;;    serve the sole purpose of stuffing the target environment with
;;;;    macros, and the FASL files generated by the compilation of
;;;;    these files are also useless. 
;;;;
;;;; Later on, when the target environment contains enough definitions
;;;; to allow it, we redefine DEFMACRO to obtain its final form.

;;; Since IN-PACKAGE is a macro, it does not exist when this file is
;;; compiled, so we must do what IN-PACKAGE does manually.  In this
;;; case, we set the *PACKAGE* variable to the package SICL-ENV.
(eval-when (:compile-toplevel)
  (setq *package* (find-package '#:sicl-env)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Macro DEFMACRO.
;;;
;;; We can obviously not define DEFMACRO using DEFMACRO.  But we have
;;; all the ingredients to define DEFMACRO "manually".

(eval-when (:compile-toplevel)
  (funcall
   #'(setf macro-function)
   (compile nil
	    (cleavir-code-utilities:parse-macro
	     'defmacro
	     '(name lambda-list &body body)
	     '(`(eval-when (:compile-toplevel)
		  (funcall #'(setf macro-function)
			   (function ,(cleavir-code-utilities:parse-macro
				       name
				       lambda-list
				       body))
			   ',name)))))
   'defmacro))


