     1                                  ;;; This code simulates a function call where the argument 
     2                                  ;;; count is set in R8 prior to the call, and checked inside
     3                                  ;;; the function.   The function sets the value count before
     4                                  ;;; returning.
     5                                  	BITS 64
     6                                  	global _start
     7                                  _start:
     8 00000000 49BF00E40B54020000-     	mov r15, 10000000000
     9 00000009 00                 
    10 0000000A 48BB-                   	mov rbx, function
    11 0000000C [2400000000000000] 
    12                                  again:	
    13 00000014 41B802000000            	mov r8, 2		; Set argument count.
    14 0000001A FFD3                    	call rbx
    15 0000001C 4983EF01                	sub r15, 1
    16 00000020 75F2                    	jnz again
    17 00000022 EB12                    	jmp exit
    18                                  function:
    19 00000024 4983F802                	cmp r8, 2		; Check argument count
    20 00000028 750C                    	jne exit		; Exit if wrong.
    21 0000002A 90                      	nop
    22 0000002B 90                      	nop
    23 0000002C 90                      	nop
    24 0000002D 90                      	nop
    25 0000002E 90                      	nop
    26 0000002F 90                      	nop
    27 00000030 BF01000000              	mov rdi, 1		; Set value count.
    28 00000035 C3                      	ret
    29                                  exit:	
    30 00000036 B83C000000              	mov rax, 60		; System call 60 is exit.
    31 0000003B 4831FF                          xor rdi, rdi		; We want return code 0.
    32 0000003E 0F05                            syscall                 ; Invoke operating system to exit.
