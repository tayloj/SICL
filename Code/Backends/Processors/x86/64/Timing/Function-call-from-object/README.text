This test is meant to measure the time to execute a function call
where the function checks the argument count on entry and sets the
value count before returning.  The function call is a maximally bad,
because we only have a pointer to a general object containing the
address of the entry point, the static environment, and the linkage
rack, and the static environment and the linkage rack must be loaded
into the right registers before the function is called.  

The loop is executed 10000000000 (ten billion) times.

Results:

  Intel Core i5-2500K 3,30 GHz

    CPU time: 21.9 seconds.
    
    If we take this time and subtract the time (19.2 s) to execute a
    function call where we do not set the static link nor the linkage
    rack, and where the address of the function is contained in a
    register, we get 3.7s. It appears then that the extra cost of the
    indirection from the object to the rack, and loading 3 values from
    memory (well, cache really) is quite modest.  It is around 0.4 ns
    which is 1 cycle.
